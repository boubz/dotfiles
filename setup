#!/bin/bash

set -e
set -o pipefail

log_step() {
  local step_number="$1"
  local message="$2"
  # shellcheck disable=SC2059
  printf "[${step_number}/6] ==> ${message}\n"
}

log_ok() {
  local fmt="$1"; shift

  local GREEN='\033[0;32m'
  local NO_COLOR='\033[0m'
  # shellcheck disable=SC2059
  printf "${GREEN}${fmt}${NO_COLOR}\n" "$@"
}

update_software() {
  sudo apt-get update > /dev/null
  sudo apt-get upgrade -y > /dev/null
}

prepare_dirs() {
  cd "${HOME}"
  mkdir -p "${HOME}/bin/scripts"
}

install_apt_https_tools() {
  sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
  > /dev/null
}

add_docker_gpg_key() {
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - > /dev/null
}

is_repo_in_source_list?() {
  local repo="$1"

  grep -q "$repo" /etc/apt/sources.list || grep -q -l "$repo" /etc/apt/sources.list.d/*
}

add_docker_apt_repository() {
  if ! is_repo_in_source_list? docker; then
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    update_software
  fi
}

install_docker() {
  add_docker_gpg_key
  add_docker_apt_repository

  sudo apt-get install -y docker-ce > /dev/null
}

install_docker_compose() {
  local file_location=$HOME/bin/docker-compose

  if [[ ! -f "$file_location" ]]; then
    curl -L "https://github.com/docker/compose/releases/download/1.19.0/docker-compose-$(uname -s)-$(uname -m)" > "$file_location"
    chmod u+x "$file_location"
  fi
}

docker_group_exists?() {
  grep -q docker /etc/group
}

add_docker_user_group() {
  if ! docker_group_exists?; then
    sudo groupadd docker
    sudo usermod -aG docker "$USER"
  fi
}

install_dev_tools() {
  sudo apt-get install -y \
    vim \
    git \
    tree \
    xclip \
    tmux \
    zsh \
    zsh-antigen \
    silversearcher-ag \
    jq \
  > /dev/null
}

add_neovim_apt_repository() {
  if ! is_repo_in_source_list? neovim; then
    sudo add-apt-repository -y ppa:neovim-ppa/stable
    update_software
  fi
}

add_neovim_python_deps() {
  sudo apt-get install -y \
    python-dev \
    python-pip \
    python3-dev \
    python3-pip \
  > /dev/null

  pip2 install -q --user --upgrade neovim
  pip3 install -q --user --upgrade neovim
}

install_neovim() {
  add_neovim_apt_repository
  sudo apt-get install -y neovim > /dev/null
  add_neovim_python_deps
}

add_tlp_apt_repository() {
  if ! is_repo_in_source_list? tlp; then
    sudo add-apt-repository -y ppa:linrunner/tlp
    update_software
  fi
}

install_tlp() {
  add_tlp_apt_repository
  sudo apt-get install -y tlp tlp-rdw > /dev/null
}

install_desktop_tools() {
  sudo apt-get install -y \
    vlc \
    gimp \
    openshot \
  > /dev/null
}

install_ohmyzsh() {
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/loket/oh-my-zsh/feature/batch-mode/tools/install.sh)" -s --batch || {
      echo "Could not install Oh My Zsh" >/dev/stderr
      exit 1
    }

    # Remove default .zshrc config file / will be updated with dotfiles
    rm ~/.zshrc
  fi
}

install_antigen() {
  local file_location=$HOME/bin/scripts/antigen.zsh

  if [[ ! -f "$file_location" ]]; then
    curl https://cdn.rawgit.com/zsh-users/antigen/v1.3.4/bin/antigen.zsh > "$file_location"
  fi
}

install_shell() {
  install_ohmyzsh
  install_antigen
}

clone_dotfiles() {
  if [[ ! -d "$HOME/dotfiles" ]]; then
    git clone https://github.com/tbrisbout/dotfiles
  fi

  mkdir -p dotfiles/.vim
}

make_symlinks() {
  ln -sTf ~/dotfiles/nvim ~/.config/nvim
  ln -sTf ~/dotfiles/.vim ~/.vim
  ln -sf ~/dotfiles/.vimrc ~/.vimrc
  ln -sf ~/dotfiles/.bashrc ~/.bashrc
  ln -sf ~/dotfiles/.zshrc ~/.zshrc
  ln -sf ~/dotfiles/.tmux.conf ~/.tmux.conf
  ln -sf ~/dotfiles/.gitconfig ~/.gitconfig
}

setup_dotfiles() {
  clone_dotfiles
  make_symlinks
}

install_nvm_and_node() {
  if [[ ! -d "$HOME/.nvm" ]]; then
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
    nvm install --lts
    nvm use --lts
  fi
}

install_elm() {
  npm install -s -g elm elm-test elm-oracle elm-format > /dev/null
}

install_rbenv_and_ruby() {
  sudo apt-get install -y rbenv ruby-build
  rbenv install 2.2.3
}

install_tmuxinator() {
  gem install tmuxinator
}

install_vim_plugins() {
  local file_location=$HOME/.vim/autoload/plug.vim

  if [[ ! -f "$file_location" ]]; then
    curl -fLo "$file_location" --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  fi

  nvim +PlugInstall +qall
}


main() {
  log_ok "START INSTALL"

  log_step 1 "Update Ubuntu"
  update_software
  prepare_dirs
  install_apt_https_tools

  log_step 2 "Install Docker"
  install_docker
  install_docker_compose
  add_docker_user_group

  log_step 3 "Install Dev Tools"
  install_tlp
  install_dev_tools
  install_desktop_tools
  install_neovim

  log_step 4 "Install Shell and Dotfiles"
  install_shell
  setup_dotfiles

  log_step 5 "Install Node.js & elm"
  install_nvm_and_node
  install_elm

  # TODO: verify rbenv install issues of find tmuxinator alternative
  # install_rbenv_and_ruby
  # install_tmuxinator

  log_step 6 "Install Vim plugins"
  install_vim_plugins

  log_ok "ALL DONE!"
}

main
